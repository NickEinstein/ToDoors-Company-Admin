{"version":3,"file":"static/js/228.b279f31d.chunk.js","mappings":"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","sources":["common/PasswordTextField.js","features/login/ForgotPassword.js","utils/FormikUtils.js"],"sourcesContent":["import React from \"react\";\r\nimport { IconButton, InputAdornment, TextField, Icon } from \"@mui/material\";\r\nimport clsx from \"clsx\";\r\n\r\n/** @param {import(\"@mui/material\").TextFieldProps} props */\r\nfunction PasswordTextField(props) {\r\n  const { error, ...rest } = props;\r\n  const [isVisible, setVisible] = React.useState(false);\r\n  const handleVisible = React.useCallback(() => setVisible((p) => !p), []);\r\n\r\n  console.log(isVisible);\r\n\r\n  return (\r\n    <TextField\r\n      type={isVisible ? \"text\" : \"password\"}\r\n      InputProps={{\r\n        endAdornment: (\r\n          <InputAdornment position=\"end\">\r\n            <IconButton\r\n              aria-label=\"toggle password visibility\"\r\n              onClick={handleVisible}\r\n              disabled={props.disabled}\r\n            >\r\n              <Icon className={clsx(error ? \"text-danger\" : \"text-primary\")}>\r\n                {isVisible ? \"visibility_off\" : \"visibility\"}\r\n              </Icon>\r\n            </IconButton>\r\n          </InputAdornment>\r\n        ),\r\n      }}\r\n      error={error}\r\n      {...rest}\r\n    />\r\n  );\r\n}\r\n\r\nexport default PasswordTextField;\r\n","import React, { useState } from \"react\";\r\nimport UserApi from \"apis/UserApi\";\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useSnackbar } from \"notistack\";\r\n\r\nimport { FcGoogle } from \"react-icons/fc\";\r\n// import { Button, TextField, Typography } from \"@mui/material\";\r\nimport PasswordTextField from \"common/PasswordTextField\";\r\nimport { getTextFieldFormikProps } from \"utils/FormikUtils\";\r\nimport useAuthUser from \"hooks/useAuthUser\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { RouteEnum } from \"constants/RouteConstants\";\r\nimport LoginHeader from \"common/LoginHeader\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport toDoorLogo from \"images/Ellipse 30.png\";\r\nimport background from \"images/background.png\";\r\nimport snake from \"images/Mask group.png\";\r\n\r\n// import ReactDOM from 'react-dom';\r\n// import trustedBy1 from './images/Vector.png'\r\nimport trustedBy2 from \"images/Rectangle 7.png\";\r\nimport trustedBy3 from \"images/Rectangle 106.png\";\r\n// import LoginHeader from './LoginHeader';\r\n// import trustedBy3 from './images/trustedBy-3.png'\r\n// import trustedBy4 from './images/trustedBy-4.png'\r\nimport {\r\n  Button,\r\n  Input,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { RiArrowLeftSLine } from \"react-icons/ri\";\r\n\r\nfunction ForgotPassword(props) {\r\n  const [age, setAge] = React.useState(\"\");\r\n \r\n\r\n  const history = useNavigate();\r\n\r\n  const redirect = () => {\r\n\r\n    history(\"/dashboard\");\r\n  };\r\n\r\n\r\n  // const authUser = useAuthUser();\r\n\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [loginMuation, loginMutationResult] = UserApi.useLoginMutation();\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      username: \"\",\r\n      password: \"\",\r\n    },\r\n    validationSchema: yup.object({\r\n      username: yup.string().trim().required(),\r\n      password: yup.string().trim().required(),\r\n    }),\r\n    onSubmit: async (values) => {\r\n      localStorage.setItem(\"il\", true);\r\n      redirect();\r\n      // history('/dashboard')\r\n\r\n      // try {\r\n      //   const data = await loginMuation({ data: values }).unwrap();\r\n      //   // TODO extra login\r\n      //   // redirect()\r\n      //   enqueueSnackbar(\"Logged in successful\", { variant: \"success\" });\r\n      // } catch (error) {\r\n      //   enqueueSnackbar(error?.data?.message, \"Failed to login\", {\r\n      //     variant: \"error\",\r\n      //   });\r\n      // }\r\n    },\r\n  });\r\n\r\n  // if (authUser.accessToken) {\r\n  //   return <Navigate to={RouteEnum.HOME} />;\r\n  // }\r\n\r\n  return (\r\n    // <div>\r\n    //  {/* <Typography variant=\"h6\">Hi</Typography> */}\r\n    //   <form onSubmit={formik.handleSubmit}>\r\n    //     <TextField\r\n    //       label=\"Username\"\r\n    //       {...getTextFieldFormikProps(formik, \"username\")}\r\n    //     />\r\n    //     <PasswordTextField\r\n    //       label=\"Password\"\r\n    //       {...getTextFieldFormikProps(formik, \"password\")}\r\n    //     />\r\n    //     <Button type=\"submit\">Submit</Button>\r\n    //   </form>\r\n    // </div>\r\n    <div className=\"  pl-24 h-screen\">\r\n      <div className=\"flex justify-between\">\r\n        <div\r\n          className=\"pt-12\"\r\n          style={{\r\n            paddingLeft: \"\",\r\n            paddingRight: \"\",\r\n            minWidth: \"40%\",\r\n            // maxWidth: \"75%\",\r\n          }}\r\n        >\r\n          <LoginHeader />\r\n          <div className=\"flex-vertical\">\r\n            <div className=\"my-8\">\r\n              <Typography variant=\"h3\" className=\"mb-2 mt-3 font-bold\">\r\n                Forgot Password\r\n              </Typography>\r\n              <p className=\"text-[#7D7878] w-[67%] text-sm\">\r\n                To reset your password, enter your email address, and we'll send\r\n                you a link.\r\n              </p>\r\n            </div>\r\n\r\n            <form onSubmit={formik.handleSubmit}>\r\n              <div class=\"mb-12\">\r\n                <Typography variant=\"h6\" className=\"my-2\">\r\n                  Email Address\r\n                </Typography>\r\n                <TextField\r\n                  size=\"medium\"\r\n                  className=\"w-full\"\r\n                  placeholder=\"Enter your username\"\r\n                  // onChange={handleChange}\r\n                  //     onChange={(e)=>{\r\n                  //   alert('k')\r\n                  //   // localStorage.setItem ('location', e.target.value)\r\n                  // }}\r\n                  name=\"username\"\r\n                  {...getTextFieldFormikProps(formik, \"username\")}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"text-white m-b-30 mt-5  \">\r\n                <Button\r\n                  className=\"p-3 bg-primary-main w-full text-base\"\r\n                  type=\"submit\"\r\n                  // onClick={() => localStorage.setItem('type', 'CLIENT')}\r\n                  // className=' '\r\n                >\r\n                  Continue\r\n                </Button>\r\n                <div\r\n                  //   onClick={handleShow}\r\n                  className=\"flex justify-center items-center mb-2 m-auto cursor-pointer p-2\"\r\n                >\r\n                  <div class=\"w-1/3 mt-4 flex items-center\">\r\n                    <div\r\n                      style={{ border: \"1px solid #494949\" }}\r\n                      className=\"border-solid w-5 mr-2 rounded h-5 flex justify-center items-center\"\r\n                    >\r\n                      <RiArrowLeftSLine\r\n                        className=\"\"\r\n                        style={{ fontSize: \"22px\", color: \"#494949\" }}\r\n                      />\r\n                    </div>\r\n                    <p\r\n                      // onClick={() => setOpen(!open)}\r\n                      style={{ color: \"#494949\" }}\r\n                      className=\"text-base \"\r\n                    >\r\n                      Back to Sign In\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n        <div\r\n          className=\"relative flex-vertical bg-primary-main py-36 text-white pl-10 justify-center w-2/5\"\r\n          style={{\r\n            minWidth: \"40%\",\r\n            minHeight: \"100%\",\r\n            position: \"relative\",\r\n            // backgroundImage: `url(${snake})`,\r\n            // minHeight:\"500px\"\r\n            // backgroundColor: \"green\",\r\n          }}\r\n        >\r\n          <img\r\n            className=\"absolute z-0 top-0 left-0 w-[100%] h-[100%]\"\r\n            src={snake}\r\n          />\r\n          <div className=\"z-10\">\r\n            <Typography variant=\"h1\" className=\"mt-10 font-bold\">\r\n              Earn\r\n            </Typography>\r\n            <Typography variant=\"h1\" className=\"mt-10 font-bold\">\r\n              Ride\r\n            </Typography>\r\n            <Typography variant=\"h1\" className=\"mt-10 font-bold\">\r\n              Manage.\r\n            </Typography>\r\n          </div>\r\n          {/* <Typography variant='h1' className='mt-10 font-bold'>Manage.</Typography> */}\r\n\r\n          {/* background:`url(${background})` */}\r\n          {/* <div className='two-circles relative' style={{ position: 'relative' }}></div> */}\r\n          {/* <img src={trustedBy3} className='' style={{ position: 'absolute', top: '50%', height: '49%', width: '98.8%' }} /> */}\r\n          {/* <div className='' style={{width:'100px', height:'50px', ottomLeftRadius:'100%',ottomRightRadius:'100%', position:'absolute', bottom:'0px', opColor:'blue'}}></div> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ForgotPassword;\r\n","/**\r\n * \r\n * @param {*} formik \r\n * @param {*} key \r\n * @returns \r\n */\r\nexport function getTextFieldFormikProps(formik, key) {\r\n  return {\r\n    ...formik.getFieldProps(key),\r\n    error: !!formik.touched?.[key] && !!formik.errors?.[key],\r\n    helperText: !!formik.touched?.[key] && formik.errors?.[key],\r\n    focused: formik.values?.[key],\r\n  };\r\n}\r\n\r\nexport function getCheckFieldFormikProps(\r\n  formik,\r\n  key,\r\n  checkedValue = true\r\n  // unCheckedValue = false\r\n) {\r\n  const textFieldProps = getTextFieldFormikProps(formik, key);\r\n  // if (key === \"allowAttributeConfiguration\") {\r\n  //   console.log(textFieldProps.value);\r\n  // }\r\n  const value =\r\n    typeof checkedValue === \"boolean\"\r\n      ? !!textFieldProps.value\r\n      : textFieldProps.value;\r\n  return {\r\n    ...textFieldProps,\r\n    value: value,\r\n    checked: value === checkedValue,\r\n  };\r\n  // return {\r\n  //   checked: !!formik.values[key],\r\n  //   onChange: (e) => formik.setFieldValue(key, e.target.checked),\r\n  // };\r\n}\r\n"],"names":["props","error","rest","React","isVisible","setVisible","handleVisible","p","console","log","type","InputProps","endAdornment","position","onClick","disabled","className","clsx","history","useNavigate","useSnackbar","enqueueSnackbar","UserApi","formik","useFormik","initialValues","username","password","validationSchema","yup","trim","required","onSubmit","values","localStorage","setItem","style","paddingLeft","paddingRight","minWidth","variant","handleSubmit","class","size","placeholder","name","getTextFieldFormikProps","border","fontSize","color","minHeight","src","snake","key","getFieldProps","touched","errors","helperText","focused"],"sourceRoot":""}