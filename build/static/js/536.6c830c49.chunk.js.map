{"version":3,"file":"static/js/536.6c830c49.chunk.js","mappings":"4UAiOA,UAtKA,YAA4B,IAAXA,EAAU,EAAVA,OAEf,IADiBC,EAAAA,EAAAA,MACKC,EAAAA,EAAAA,UAAsC,OAA5D,eAAYC,GAAZ,WACA,GAAgCD,EAAAA,EAAAA,UAAsC,MAAtE,eACA,GADA,WACgCA,EAAAA,EAAAA,UAAsC,OAAtE,eACA,GADA,WACkDA,EAAAA,EAAAA,UACnB,OAD/B,eAAOE,EAAP,KAGA,GAHA,MAGsBF,EAAAA,EAAAA,UAAS,KAA/B,eAKA,GALA,WAKwBA,EAAAA,EAAAA,UAAS,OAAjC,0BAEgBG,EAAAA,EAAAA,OAEfC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,yCAAG,oGAEEC,EAAAA,EAAAA,IAAI,CACpBC,SAAS,0BAETC,MAAM,IALQ,yDAAH,qDAUTC,EAAaC,YAAYL,EAAW,KAC1C,OAAO,kBAAMM,cAAcF,EAApB,CACR,GAAE,IAOWG,EAAAA,GAAAA,QAAA,2CAA+CC,aAAaC,QAAQ,WAkCnF,IAAQC,GAAaC,EAAAA,EAAAA,IAAe,CAClCC,GAAI,oBACJC,iBAAkB,0CAClBC,UAAW,CAAC,YAHNJ,SASR,IAAKA,EACH,OAAO,oCAGT,IAmBMK,EAAS,CACbC,IAAK,SACLC,IAAK,UAMP,OAAOP,GACL,iBAAKQ,UAAU,kBAAf,WAEE,iBAAKA,UAAU,qCAAf,WACE,SAAC,IAAD,CAAcC,KAAK,EAAMC,MAAM,KAE/B,iBACEC,MAAM,kDACNC,QAAS7B,EAFX,WAIE,gBACE8B,MAAO,CAAEC,OAAQ,qBACjBN,UAAU,iEAFZ,UAIE,SAAC,MAAD,CACEA,UAAU,GACVK,MAAO,CAAEE,SAAU,OAAQC,MAAO,gBAGtC,cAEEH,MAAO,CAAEG,MAAO,WAChBR,UAAU,wBAHZ,yBAUJ,UAAC,KAAD,CACES,kBAlCiB,CACrBC,MAAO,OACPC,OAAQ,QAiCJd,OAAQA,EACRe,KAAM,GACNC,QAAS,CACPC,aAAa,EACbC,mBAAmB,EACnBC,gBAAgB,EAChBC,mBAAmB,GAErBC,OAAQ,SAACC,GAAD,OAASzC,EAAOyC,EAAhB,EAVV,WAaE,SAAC,KAAD,CAAQC,SAAUvB,IACjBlB,IACC,SAAC,KAAD,CAAoB0C,WAAY1C,KAGlC,+BAIJ,uBAEH,C","sources":["features/maps/Maps.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport UserApi from \"apis/UserApi\";\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useSnackbar } from \"notistack\";\r\n// import { Button, TextField, Typography } from \"@mui/material\";\r\nimport PasswordTextField from \"common/PasswordTextField\";\r\nimport { getTextFieldFormikProps } from \"utils/FormikUtils\";\r\nimport useAuthUser from \"hooks/useAuthUser\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { BsCircleFill } from \"react-icons/bs\";\r\n\r\nimport {\r\n  useJsApiLoader,\r\n  GoogleMap,\r\n  Marker,\r\n  Autocomplete,\r\n  DirectionsRenderer,\r\n} from \"@react-google-maps/api\";\r\nimport { RouteEnum } from \"constants/RouteConstants\";\r\nimport LoginHeader from \"common/LoginHeader\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport toDoorLogo from \"images/Ellipse 30.png\";\r\n// import ManageCompanyCard from 'common/ManageCompanyCard'\r\n\r\n// import { RouteEnum } from \"constants/RouteConstants\";\r\n// import ReactDOM from 'react-dom';\r\n// import trustedBy1 from './images/Vector.png'\r\nimport gigLogo from \"images/Ellipse 56.png\";\r\nimport trustedBy3 from \"images/Rectangle 106.png\";\r\nimport io from \"socket.io-client\";\r\n// import LoginHeader from './LoginHeader';\r\n// import trustedBy3 from './images/trustedBy-3.png'\r\n// import trustedBy4 from './images/trustedBy-4.png'\r\nimport {\r\n  Button,\r\n  TableBody,\r\n  TableCell,\r\n  Table,\r\n  Input,\r\n  TableContainer,\r\n  Paper,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport WallCards from \"common/WallCards\";\r\nimport ToDoorSearch from \"common/ToDoorSearch\";\r\nimport { RiArrowLeftSLine } from \"react-icons/ri\";\r\nimport { get } from \"services/fetch\";\r\n// import ManageCompanyCard from '.features/manageCompanies/ManageCompanyCard';\r\n// import { makeStyles } from \"@material-ui/core/styles\";\r\n// import Paper from \"@material-ui/core/Paper\";\r\n// import { makeStyles } from '@mui/styles';\r\n\r\nfunction Trips({ switsh }) {\r\n  const authUser = useAuthUser()\r\n  const [map, setMap] = useState(/** @type google.maps.map*/ (null));\r\n  const [distance, setDistance] = useState(/** @type google.maps.map*/ (null));\r\n  const [duration, setDuration] = useState(/** @type google.maps.map*/ (null));\r\n  const [directionResponse, setDirectionResponse] = useState(\r\n    /** @type google.maps.map*/ (null)\r\n  );\r\n  const [age, setAge] = useState(\"\");\r\n  const handleChange = (event) => {\r\n    setAge(event.target.value);\r\n  };\r\n\r\n  const [data, setData] = useState(null);\r\n\r\n  const history = useNavigate();\r\n\r\n   useEffect(() => {\r\n     const fetchData = async () => {\r\n       // const deleteRider = async () => {\r\n       const res = await get({\r\n         endpoint: `api/payment/getAllBanks`,\r\n         //  body: { ...payload },\r\n         auth: true,\r\n       });\r\n       //  setAllBikez(res.data.data);\r\n     };\r\n\r\n     const intervalId = setInterval(fetchData, 3000);\r\n     return () => clearInterval(intervalId);\r\n   }, []);\r\n\r\n\r\n  const redirect = () => {\r\n    history(\"/complete-signUp\");\r\n  };\r\n// http://todoorapp.com:3000?token=\r\n  const socket = io.connect(`https://todoorapp.com:3000?token=${localStorage.getItem('token')}`);\r\n\r\n  const toEmit = () => {\r\n    let payload = {\r\n      user: {\r\n        _id:useAuthUser._id\r\n      },\r\n    };\r\n\r\n    // socket.emit(\"adminMapSocket\", payload);\r\n  };\r\n\r\n  function createData(\r\n    destination,\r\n    rider,\r\n    orderId,\r\n    status,\r\n    fee,\r\n    departureDate,\r\n    arrivalDate,\r\n    timeDelay\r\n  ) {\r\n    return {\r\n      destination,\r\n      rider,\r\n      orderId,\r\n      status,\r\n      fee,\r\n      departureDate,\r\n      arrivalDate,\r\n      timeDelay,\r\n    };\r\n  }\r\n\r\n  const { isLoaded } = useJsApiLoader({\r\n    id: \"google-map-script\",\r\n    googleMapsApiKey: \"AIzaSyAssvIlc0TbayfgN6C3rfGtlCXQckeystQ\",\r\n    libraries: [\"places\"],\r\n  });\r\n  //   const {isLoaded} = useJsApiLoader({\r\n  //     googleMapsApiKey:'AIzaSyB6dttqGcdoqUQYT4rt4ZEd9_UOwP4GoMc',\r\n  //   })\r\n\r\n  if (!isLoaded) {\r\n    return <p>isloaded</p>;\r\n  }\r\n\r\n  const calculateRoute = async (origin, destination) => {\r\n    if (origin == \"\" || destination == \"\") {\r\n      return;\r\n    }\r\n    //eslint-disable-next-line no-undef\r\n    const directionService = new google.maps.DirectionsService();\r\n    const result = await directionService.route({\r\n      origin: origin,\r\n      destination: destination,\r\n      //eslint-disable-next-line no-undef\r\n      travelMode: google.maps.TravelMode.DRIVING,\r\n    });\r\n    setDirectionResponse(result);\r\n    setDistance(result.routes[0].legs[0].distance.text);\r\n    setDuration(result.routes[0].legs[0].duration.text);\r\n  };\r\n\r\n  //eslint-disable-next-line no-undef\r\n\r\n  const center = {\r\n    lat: 6.458985,\r\n    lng: 3.601521,\r\n  };\r\n  const containerStyle = {\r\n    width: \"100%\",\r\n    height: \"45vw\",\r\n  };\r\n  return isLoaded ? (\r\n    <div className=\"w-full relative\">\r\n      {/* <Button>Emit</Button> */}\r\n      <div className=\"absolute w-full top-10 left-8 z-50\">\r\n        <ToDoorSearch pad={true} hide={true} />\r\n\r\n        <div\r\n          class=\"w-1/3 mt-4 pl-8 flex items-cente cursor-pointer\"\r\n          onClick={switsh}\r\n        >\r\n          <div\r\n            style={{ border: \"1px solid #494949\" }}\r\n            className=\"border-solid w-5 mr-2 rounded flex justify-center items-center\"\r\n          >\r\n            <RiArrowLeftSLine\r\n              className=\"\"\r\n              style={{ fontSize: \"22px\", color: \"#494949\" }}\r\n            />\r\n          </div>\r\n          <p\r\n            // onClick={() => setOpen(!open)}\r\n            style={{ color: \"#494949\" }}\r\n            className=\"text-xl font-semibold\"\r\n          >\r\n            Back\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <GoogleMap\r\n        mapContainerStyle={containerStyle}\r\n        center={center}\r\n        zoom={10}\r\n        options={{\r\n          zoomControl: false,\r\n          streetViewControl: false,\r\n          mapTypeControl: false,\r\n          fullscreenControl: false,\r\n        }}\r\n        onLoad={(map) => setMap(map)}\r\n        //   onUnmount={onUnmount}\r\n      >\r\n        <Marker position={center} />\r\n        {directionResponse && (\r\n          <DirectionsRenderer directions={directionResponse} />\r\n        )}\r\n        {/* Child components, such as markers, info windows, etc. */}\r\n        <></>\r\n      </GoogleMap>\r\n    </div>\r\n  ) : (\r\n    <></>\r\n  );\r\n}\r\n\r\nexport default Trips;\r\n"],"names":["switsh","useAuthUser","useState","setMap","directionResponse","useNavigate","useEffect","fetchData","get","endpoint","auth","intervalId","setInterval","clearInterval","io","localStorage","getItem","isLoaded","useJsApiLoader","id","googleMapsApiKey","libraries","center","lat","lng","className","pad","hide","class","onClick","style","border","fontSize","color","mapContainerStyle","width","height","zoom","options","zoomControl","streetViewControl","mapTypeControl","fullscreenControl","onLoad","map","position","directions"],"sourceRoot":""}